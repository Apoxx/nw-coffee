// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeScript, Module, binary, child_process, compileFile, ext, findExtension, fork, helpers, loadFile, path, splited, _i, _len, _ref;

  CoffeeScript = require('coffee-script');

  path = require('path');

  child_process = require('child_process');

  helpers = CoffeeScript.helpers;

  compileFile = function(filename) {
    var answer, err, raw, stripped;
    raw = fs.readFileSync(filename, 'utf8');
    stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
    try {
      answer = compile(stripped, {
        filename: filename,
        sourceMap: true,
        inline: true,
        literate: helpers.isLiterate(filename)
      });
    } catch (_error) {
      err = _error;
      throw helpers.updateSyntaxError(err, stripped, filename);
    }
    return '' + answer.js + '\n//# sourceMappingURL=data:application/json;base64,' + (window.btoa(window.unescape(encodeURIComponent(answer.v3SourceMap)))) + '\n//# sourceURL=' + filename;
  };

  loadFile = function(module, filename) {
    var answer;
    answer = CoffeeScript._compileFile(filename, false);
    return module._compile(answer, filename);
  };

  if (require.extensions) {
    _ref = CoffeeScript.FILE_EXTENSIONS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      require.extensions[ext] = loadFile;
    }
    Module = require('module');
    findExtension = function(filename) {
      var curExtension, extensions;
      extensions = path.basename(filename).split('.');
      if (extensions[0] === '') {
        extensions.shift();
      }
      while (extensions.shift()) {
        curExtension = '.' + extensions.join('.');
        if (Module._extensions[curExtension]) {
          return curExtension;
        }
      }
      return '.js';
    };
    Module.prototype.load = function(filename) {
      var extension;
      this.filename = filename;
      this.paths = Module._nodeModulePaths(path.dirname(filename));
      extension = findExtension(filename);
      Module._extensions[extension](this, filename);
      return this.loaded = true;
    };
  }

  if (child_process) {
    fork = child_process.fork;
    splited = require.resolve('coffee-script').split(path.sep);
    splited = splited.splice(0, splited.length - 3);
    splited.push('bin', 'coffee');
    binary = splited.join(path.sep);
    child_process.fork = function(path, args, options) {
      if (helpers.isCoffee(path)) {
        if (!Array.isArray(args)) {
          options = args || {};
          args = [];
        }
        args = [path].concat(args);
        path = binary;
      }
      return fork(path, args, options);
    };
  }

}).call(this);
